function Jq = Jacobian_q_join_z(Tbase,d,q,theta,L,Ttool)

    %Jacobian Numerical method

    H = (Tbase*Tz(d)*Tz(theta(1))*Rz(q(1))*Tx(L(1))*...
    Tx(theta(2))*Ty(theta(3))*Tz(theta(4))*Rx(theta(5))*Ry(theta(6))*Rz(theta(7))*...
    Rz(q(2))*Tx(L(2))*...
    Tx(theta(8))*Ty(theta(9))*Tz(theta(10))*Rx(theta(11))*Ry(theta(12))*Rz(theta(13))*....
    Rz(q(3))*Ttool); 
    
    R = H(1:3,1:3);  % extract rotation matrix
    
    % diff by q1
    Td=(Tbase*Tz(d)*Tz(theta(1))*Rzd(q(1))*Tx(L(1))*...
        Tx(theta(2))*Ty(theta(3))*Tz(theta(4))*Rx(theta(5))*Ry(theta(6))*Rz(theta(7))*...
        Rz(q(2))*Tx(L(2))*...
        Tx(theta(8))*Ty(theta(9))*Tz(theta(10))*Rx(theta(11))*Ry(theta(12))*Rz(theta(13))*....
        Rz(q(3))*Ttool)*...
        [R^-1 zeros(3,1);0 0 0 1];
    J_1 = [Td(1,4), Td(2,4), Td(3,4), Td(3,2), Td(1,3), Td(2,1)]' ; % extract 6 components from 4x4 Td matrix to Jacobian 1st column
    
    % diff by q2
    Td=(Tbase*Tz(d)*Tz(theta(1))*Rz(q(1))*Tx(L(1))*...
        Tx(theta(2))*Ty(theta(3))*Tz(theta(4))*Rx(theta(5))*Ry(theta(6))*Rz(theta(7))*...
        Rzd(q(2))*Tx(L(2))*...
        Tx(theta(8))*Ty(theta(9))*Tz(theta(10))*Rx(theta(11))*Ry(theta(12))*Rz(theta(13))*....
        Rz(q(3))*Ttool)*...
        [R^-1 zeros(3,1);0 0 0 1];
    J_2 = [Td(1,4), Td(2,4), Td(3,4), Td(3,2), Td(1,3), Td(2,1)]' ; % extract 6 components from 4x4 Td matrix to Jacobian 1st column
    
    % diff by q3
    Td=(Tbase*Tz(d)*Tz(theta(1))*Rz(q(1))*Tx(L(1))*...
        Tx(theta(2))*Ty(theta(3))*Tz(theta(4))*Rx(theta(5))*Ry(theta(6))*Rz(theta(7))*...
        Rz(q(2))*Tx(L(2))*...
        Tx(theta(8))*Ty(theta(9))*Tz(theta(10))*Rx(theta(11))*Ry(theta(12))*Rz(theta(13))*....
        Rzd(q(3))*Ttool)*...
        [R^-1 zeros(3,1);0 0 0 1];    
    J_3 = [Td(1,4), Td(2,4), Td(3,4), Td(3,2), Td(1,3), Td(2,1)]' ; % extract 6 components from 4x4 Td matrix to Jacobian 1st column
    
        
    % Full Jacobian 6x7
    Jq = [J_1, J_2, J_3];
end
